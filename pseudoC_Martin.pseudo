PSEUDO CODE MARTIN

import java.util.Scanner;

main throws NoCmdLineArgException {
    EXCEPTION HANDLING {
        if (args.length == 0) {
            throw new NoCmdLineArgException("** Please provide a filename as an argument.");
        }
        String filename = args[0]+".txt";
    }

    PREPARATION{
        // Get txtArray -> CLASSES AND METHODS ALREADY DONE
        TxtReader fileReader2 = new TxtReader();
        ArrayList<String> txtArray = fileReader2.getNow(filename);

        // Convert it to an array of Nodes -> TO BE CREATED : Node class, For loop method, String split method 
        ArrayList<Node> nodeArray = new ArrayList<Node>();
        try{
            if (txtArray.isnotempty()) {
    
                // TODO: FAIRE DE LA BOUCLE UNE FONCTION PRENANT txtArray EN PARAMETRE (.toNodeArray(txtArray) par ex)
                for (int i = 0; i < txtArray.size(); i++) {
                    String line = txtArray.get(i);
                    // Check if txt starts with "#", "?" or "="
                    if (Character.isDigit(line.charAt(0))) {
                        String[] parts = line.split("\\s+", 2);     // split on whitespace, max 2 parts
                        String type = parts[0];                
                        String data = parts[1];

                        Node newNode = new Node(type, data);        // Here type = #
                        nodeArray.add(newNode)
                        continue;
                    }
                    else if (txt.startsWith("?")){
    
                        // To be put in a method
                        String[] parts = line.split("\\s+", 4);     // split on whitespace, max 4 parts
                        String type = parts[0];                     // first part is the question mark
                        int n1 = Integer.parseInt(parts[1]);        // second part is n1
                        int n0 = Integer.parseInt(parts[2]);        // third part is n0                    
                        String data = parts[3];
    
                        Node newNode = new Node(type, n1, n0, data);    
                        nodeArray.add(newNode);
                        continue;
                    }
                    else if (txt.startsWith("=")){
                        // To be put in a method
                        String[] parts = line.split("\\s+", 2);     // split on whitespace, max 2 parts
                        String type = parts[0];                
                        String data = parts[1];
    
                        Node newNode = new Node(type, data);
                        nodeArray.add(newNode);
                        continue;
                    }
                    
                }
                // At this point, the Array of String txtArray has been converted into an Array of Nodes, each node with its attributes .type and .data (minimum) (+ .n1 and .n0 eventually)
            }
            else if (txtArray.isEmpty()) {
                FileNotFoundException e1 = new FileNotFoundException();
                throw e1;
            }
        }
        catch (FileNotFoundException e1) {
            System.out.println("** FileNotFoundException : " + e1.getMessage() + ". Please create {filename}.txt manually beforehand.");
        }
        
    }

    LANCEMENT DU JEU{
        // Variables initialisation and welcome message
        Scanner scanner = start();
        String userAnswer, userInput, newAnswer, newQuestion;
        int i = 1;
        
        // Already defined function -> Prints "Please choose a team:" and lets the user choose
        FirstLineReader flineReader = new FirstLineReader();
        flineReader.readNow(filename);
        userAnswer = scanner.next();

        // Beginning of the guessing game
        while (i < nodeArray.size()){
            if (nodeArray[i].type == QUESTION) {
                // ----------------------------------------------------------------
                // Create method typeQuestion
                System.out.println(nodeArray[i].data+" ? (Y/N)");

                    // --------------------------------------
                    // Create method for userInput handling ? -> "userInputHandler" for example
                    userInput = scanner.next();
                    if (userInput.size() > 1){
                        userInput = userInput.charAt(0).toLowerCase();
                    }
                    if (userInput != "y" || userInput != "n"){
                        System.out.println("Invalid input. Try again !");
                        userInputHandler();
                    }
                    // --------------------------------------
                
                if(userInput == "y"){
                    i = nodeArray[i].n1;
                    continue;
                }
                else if (userInput == "y"){
                    i = nodeArray[i].n0;
                    continue;
                }
                // ----------------------------------------------------------------
                 
            }
            else if (nodeArray[i].type == ANSWER){
                // ----------------------------------------------------------------
                // Create method typeAnswer
                System.out.println("Is it "+nodeArray[i].data+" ? (Y/N)");

                    // --------------------------------------
                    // Create method for userInput handling ? -> "userInputHandler" for example
                    while (true) {
                        userInput = scanner.next();
                        if (userInput.length() > 1) {
                            userInput = userInput.substring(0, 1).toLowerCase();
                        }

                        if (userInput.equals("y") || userInput.equals("n")) {
                            break;
                        } 
                        else {
                            System.out.println("Invalid input. Try again !");
                        }
                    }
                    // (return userInput)
                    // --------------------------------------

                if (userInput.equals("y")){
                    System.out.println("I have won!");
                    break;
                }
                else if (userInput.equals("n")){
                    System.out.println("I am unable to guess; you have won!\nWhat did you choose?");
                    newAnswer = scanner.next();
                    
                    System.out.println("What question could I ask to distinguish "+userAnswer+" from "+nodeArray[i].data+"?");
                    newQuestion = scanner.next();
                    
                    System.out.println("For "+userAnswer+", would you answer yes or no to this question (Y/N)?");
                    // --------------------------------------
                    // Create method for userInput handling ? -> "userInputHandler" for example
                    while (true) {
                        userInput = scanner.next();
                        if (userInput.length() > 1) {
                            userInput = userInput.substring(0, 1).toLowerCase();
                        }
                        
                        if (userInput.equals("y") || userInput.equals("n")) {
                            break;
                        } 
                        else {
                            System.out.println("Invalid input. Try again !");
                        }
                    }
                    // (return userInput)
                    // --------------------------------------
                    
                    Node newQNode = new Node("?", 0, 0, newQuestion);
                    Node newANode = new Node("=", newAnswer);

                    /**
                    * METHOD TO BE IMPLEMENTED
                    *
                    * @param : nodeArray, newQnode, newANode
                    * 
                    * - Initialiser un { ArrayList<Node> auxNodeArray }
                    * - Boucler à travers l'ancien nodeArray et recopier dans auxNodeArray jusqu'à index i (?) (set variable temp = i)
                    * - A l'index (i) de auxNodeArray, insérer newQNode (avec n1 et n0 initialisé à 0), suivi de newANode (à (i+1)), puis recopier tous les anciens nodes dans auxNodeArray en bouclant dans nodeArray depuis la variable temp
                    * - Boucler à nouveau en // dans les 2 array pour màj n1 et n0 de chaque question node dans auxNodeArray (utiliser des variables tampons probablement)
                    * - Recopier auxNodeArray dans nodeArray puis return nodeArray
                    */
                    nodeArray = updateTree(nodeArray, newQNode, newANode, i);
                    
                }
                // ---------------------------------------------------------------- 
            }
        }
        return;
    }
}

